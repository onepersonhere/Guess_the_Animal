type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/FileINOUT.java
  visible: true
  text: |
    package animals;

    import animals.BinaryTree.BinaryTree;
    import animals.BinaryTree.Node;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.json.JsonMapper;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

    import java.io.File;
    import java.io.IOException;

    public class FileINOUT {
        static ObjectMapper objectMapper = new JsonMapper();
        static String ext = ".json";
        public static void export(String filename) {
            try {
                //System.out.println(BinaryTree.getRoot());
                objectMapper.writerWithDefaultPrettyPrinter()
                        .writeValue(new File(filename + ext), BinaryTree.getRoot());
                System.out.println("File Successfully exported!");
            }catch (IOException e){
                e.printStackTrace();
            }
        }

        public static void importNode(String filename){
            try {
                BinaryTree.setRoot(
                        objectMapper.readValue(new File(filename + ext), Node.class));
                //TODO: animals.Fact.listOfFacts, animals.Game.listOfAnimals
                BinaryTree.searchNodeRecursive(BinaryTree.getRoot());
            }catch (IOException e){
                e.printStackTrace();
            }
        }

        public static boolean searchForFile(String filename){
            File f = new File(filename+ext);
            if(f.exists() && !f.isDirectory()) {
                importNode(filename);
                return true;
            }
            return false;
        }

        public static void setObjectMapper(ObjectMapper objectMapper, String ext) {
            FileINOUT.objectMapper = objectMapper;
            FileINOUT.ext = ext;
        }
    }
  learner_created: true
- name: src/animals/Animal.java
  visible: true
  text: |
    package animals;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Animal {
        private String animal;
        private String name;
        private List<String> fact = new ArrayList<>();
        public Map<String, Boolean> factMap = new HashMap<>();
        //for testing only
        public Animal(String animal, String name, List<String> fact, Map<String, Boolean> factMap){
            this.animal = animal;
            this.name = name;
            this.fact = fact;
            this.factMap = factMap;
        }

        public Animal(String name) {
            this.name = name;

            String[] arr = name.split(" ");
            animal = "";
            for(int i = 1; i < arr.length; i++){
                animal += arr[i] + " ";
            }
            animal = animal.trim();
        }

        public Animal() {}

        public void addFact(String fact){
            this.fact.add(fact);
        }

        public String getAnimal() {
            return animal;
        }

        public String getName() {
            return name;
        }

        public List<String> getFact() {
            return fact;
        }

        public void setAnimal(String animal) {
            this.animal = animal;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setFact(List<String> fact) {
            this.fact = fact;
        }

        @Override
        public String toString(){
            if(animal != null) {
                return name;
            }else{
                return "";
            }
        }
    }
  learner_created: true
- name: src/animals/Fact.java
  visible: true
  text: |
    package animals;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;
    import static animals.UserInputs.userInputs;

    public class Fact {
        //returns question
        public static List<String> listOfFacts = new ArrayList<>();
        public static String addFact(Animal animal1, Animal animal2){
            Scanner scanner = new Scanner(System.in);
            System.out.println("Specify a fact that distinguishes "
                    + animal1 + " from " + animal2 + ".");
            System.out.println("The sentence should be of the format:" +
                    " 'It can/has/is ...'.");
            String fact = scanner.nextLine();

            String[] factArr = fact.split(" ");

            fact = "";
            for(int i = 2; i < factArr.length; i++){
                fact += factArr[i] + " ";
            }
            fact = fact.trim();

            String qns = "";
            if(factArr.length > 1){
                if(
                        factArr[1].equalsIgnoreCase("can")||
                        factArr[1].equalsIgnoreCase("has")||
                        factArr[1].equalsIgnoreCase("is")
                ){
                    System.out.println("Is the statement correct for " + animal2 + "?");
                    if(userInputs()){
                        animal2.addFact(factArr[1] + " " + fact); //can climb trees.
                        animal1.addFact(checkFormat(factArr) + " " + fact);

                        printAllFacts(animal1,animal2);
                        qns = distinguish(factArr, fact);
                        animal1.factMap.put(qns, false);
                        animal2.factMap.put(qns, true);
                    }else{
                        animal1.addFact(factArr[1] + " " + fact); //can climb trees.

                        animal2.addFact(checkFormat(factArr) + " " + fact);

                        printAllFacts(animal1,animal2);
                        qns = distinguish(factArr, fact);
                        animal1.factMap.put(qns, true);
                        animal2.factMap.put(qns, false);
                    }
                    listOfFacts.add(qns);
                    System.out.println("Nice! I've learned so much about animals!");
                }else{
                    showExamples(animal1,animal2);
                }
            }else{
                showExamples(animal1,animal2);
            }
            return qns;
        }

        private static void showExamples(Animal animal1, Animal animal2){
            System.out.println("The examples of a statement:\n" +
                    " - It can fly\n" +
                    " - It has horn\n" +
                    " - It is a mammal");
            addFact(animal1,animal2);
        }

        private static String checkFormat(String[] factArr){
            if(factArr[1].equalsIgnoreCase("can")){
                return "can't";
            }
            else if(factArr[1].equalsIgnoreCase("has")){
                return "doesn't have";
            }
            return "isn't";
        }

        private static void printAllFacts(Animal animal1, Animal animal2){
            System.out.println("I learned the following facts about animals:");
            System.out.println("- The " + animal1.getAnimal() +
                    " " + animal1.getFact().get(animal1.getFact().size()-1) + ".");
            System.out.println("- The " + animal2.getAnimal() +
                    " " + animal2.getFact().get(animal2.getFact().size()-1) + ".");
        }

        private static String distinguish(String[] factArr, String fact){
            System.out.println("I can distinguish these animals by asking the question:");
            String str = "";
            if(factArr[1].equalsIgnoreCase("can")){
                str = "Can it " + fact + "?";
            }else if(factArr[1].equalsIgnoreCase("has")){
                str = "Does it have " + fact + "?";
            }else if(factArr[1].equalsIgnoreCase("is")){
                str = "Is it " + fact + "?";
            }
            System.out.println("- "+str);
            return str;
        }
    }
  learner_created: true
- name: src/animals/Game.java
  visible: true
  text: |
    package animals;

    import animals.BinaryTree.BinaryTree;
    import animals.BinaryTree.Node;
    import animals.BinaryTree.TraverseBinaryTree;

    import java.time.LocalTime;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    import static animals.AnimalProcessor.askForAnimal;
    import static animals.Fact.addFact;
    import static animals.UserInputs.userInputs;

    public class Game {
        public BinaryTree tree = new BinaryTree();
        private static List<Animal> listOfAnimals = new ArrayList<>();

        public Game(){ //build node
            if(FileINOUT.searchForFile(Main.filepath)){
                //if file is found
                //tree.setRoot
                playGame();
            }else{
                defaultStart();
            }
        }
        private void defaultStart(){
            //Greetings
            System.out.println(getTime() + "\n");

            System.out.println("I want to learn about animals.");
            System.out.println("Which animal do you like most?");
            Animal animal = new Animal(askForAnimal());
            tree.addNode(animal);
            listOfAnimals.add(animal);
            System.out.println(
                    "Wonderful! I've learned so much about animals!" +
                            "Let's play a game!\n" +
                            "You think of an animal, and I guess it.\n" +
                            "Press enter when you're ready.");

            new Scanner(System.in).nextLine(); //consumes the \n

            tree.setRoot(new Node(animal));
            System.out.println("Is it " + animal + "?");

            if(!userInputs()){
                System.out.println("I give up. What animal do you have in mind?");
                Animal animal2 = new Animal(askForAnimal());
                listOfAnimals.add(animal2);

                String fact = addFact(animal,animal2);
                tree.setRoot(new Node(fact));
                tree = new BinaryTree(tree.getRoot());
            }else{
                System.out.println("AI Wins!");
                tree.setRoot(new Node(animal));
            }
        }
        //traverse node/build node
        public void playGame(){
            System.out.println(
                    "Let's play a game!\n" +
                    "You think of an animal, and I guess it.\n" +
                    "Press enter when you're ready.");
            new Scanner(System.in).nextLine(); //consumes the \n

            System.out.println(listOfAnimals);
            tree = TraverseBinaryTree.traverseTree(tree, tree.getRoot());
        }

        public static void addListOfAnimals(Animal animal) {
            listOfAnimals.add(animal);
        }

        public static List<Animal> getListOfAnimals() {
            return listOfAnimals;
        }

        private static String getTime(){
            LocalTime time = LocalTime.now();
            int hour = time.getHour();
            if(hour >= 5 && hour <= 12){
                return "Good morning";
            }else if(hour > 12 && hour <= 18){
                return "Good afternoon";
            }else{
                return "Good evening";
            }
        }
    }
  learner_created: true
- name: src/animals/UserInputs.java
  visible: true
  text: |
    package animals;

    import java.util.Scanner;

    public class UserInputs {
        public static boolean userInputs() {
            Scanner scanner = new Scanner(System.in);

            String[] positiveRes = {"y", "yes", "yeah", "yep", "sure", "right",
                    "affirmative", "correct", "indeed", "you bet", "exactly",
                    "you said it"};

            String[] negativeRes = {"n", "no", "no way", "nah", "nope", "negative",
                    "I don't think so", "yeah no"};

            String[] promptQns = {"I'm not sure I caught you: was it yes or no?",
                    "Funny, I still don't understand, is it yes or no?",
                    "Oh, it's too complicated for me: just tell me yes or no.",
                    "Could you please simply say yes or no?",
                    "Oh, no, don't try to confuse me: say yes or no."};

            String input = scanner.nextLine();

            input = input.toLowerCase().replaceFirst("[^a-zA-Z' ]", "").trim();
            //System.out.println(input);
            String answer = "";
            for (int i = 0; i < positiveRes.length; i++) {
                if (input.equalsIgnoreCase(positiveRes[i])) {
                    return true;
                }
            }

            for (int i = 0; i < negativeRes.length; i++) {
                if (input.equalsIgnoreCase(negativeRes[i])) {
                    return false;
                }
            }

            //ask again to clarify
            int prompt = (int) (Math.random() * 4);
            System.out.println(promptQns[prompt]);
            return userInputs();
        }
    }
  learner_created: true
- name: src/animals/AnimalProcessor.java
  visible: true
  text: |
    package animals;

    import java.util.Scanner;

    public class AnimalProcessor {
        public static String askForAnimal(){
            Scanner scanner = new Scanner(System.in);
            char[] cArr = {'a','e','i','o','u'};
            String line = scanner.nextLine();
            String animal = "";
            //"Is it a/an <animal>?"

            line = line.toLowerCase();
            if(line.length()>0) {
                if (line.split(" ").length > 1) {
                    String[] arr = line.split(" ");
                    for (int i = 1; i < arr.length; i++) {
                        animal += arr[i] + " ";
                    }
                    animal = animal.trim();

                    if (line.split(" ")[0].equals("a")) {
                        //use a
                        animal = line;
                    } else if (line.split(" ")[0].equals("an")) {
                        //use an
                        animal = line;
                    } else if (line.split(" ")[0].equals("the")) {
                        //if the
                        animal = getAnimal(cArr, animal);
                    } else {
                        //use cArr
                        //get the animal
                        animal = line;
                        animal = getAnimal(cArr, animal);
                    }
                } else {
                    animal = line.toLowerCase();
                    animal = getAnimal(cArr, animal);
                }
            }else{
                return askForAnimal();
            }
            return animal;
        }

        private static String getAnimal(char[] cArr, String animal) {
            boolean isVowel = false;
            for(int i = 0; i < cArr.length; i++) {
                //System.out.println(animal.indexOf(0) + " " + cArr[i]);
                if (animal.charAt(0) == cArr[i]){
                    //use an
                    animal = "an " + animal;
                    isVowel = true;
                    break;
                }//else use arr
            }
            if(!isVowel){
                animal = "a " + animal;
            }
            return animal;
        }
    }
  learner_created: true
- name: src/animals/Menu.java
  visible: true
  learner_created: true
- name: animals.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/707/implement#comment
status: Unchecked
record: -1
